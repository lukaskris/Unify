plugins {
    id("com.android.library")
    id("kotlin-android")
    id("kotlin-parcelize")
    id("kotlin-kapt")
    id("maven-publish")
    id("com.jfrog.artifactory")
}

android {
    compileSdk = AppConfig.compileSdk
	buildToolsVersion = AppConfig.buildToolsVersion

    defaultConfig {
        minSdk = AppConfig.minSdk
        targetSdk = AppConfig.targetSdk
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
        moduleName = "id.co.app.camera"
    }

    buildFeatures {
        dataBinding = true
    }

    packagingOptions {
        resources.excludes.add("META-INF/DEPENDENCIES")
        resources.excludes.add("META-INF/LICENSE")
        resources.excludes.add("META-INF/LICENSE.txt")
        resources.excludes.add("META-INF/license.txt")
        resources.excludes.add("META-INF/NOTICE")
        resources.excludes.add("META-INF/ASL2.0")
        resources.excludes.add("META-INF/notice.txt")
        resources.excludes.add("META-INF/NOTICE.txt")
//        exclude("META-INF/*.kotlin_module")
    }
}

dependencies {
    implementation(fileTree(mapOf("dir" to "libs", "include" to listOf("*.jar"))))
    implementation(AppDependencies.androidLibraries)
}

project.ext{
    set("artifactId", "notification")
    set("groupId", "id.co.app")
    set("versionName", "1.0.0")
    set("artifactName", "notification")
}


// This creates a task called `sourcesJar`. It subclasses `Jar`, which is a
// task that knows how to copy files into a .jar file. The block after it is
// called the configuration, which tells the task what it should do when run.
val sourcesJar = tasks.register("sourcesJar", Jar::class) {
    // from() tells the task to take its input files from the argument. In
    // this case, the input is all of our source code files.
    from(android.sourceSets["main"].java.getSourceFiles())

    // archiveClassifier lets us specify that this is an auxilary file (in
    // addition to the main file we're producing, which is a .aar file). It
    // has the effect of adding -sources at the end of the filename.
    archiveClassifier.set("sources")
}

// This is similar to `sourcesJar`, but we inherit from Javadoc instead which
// is a task that knows how to produce Javadoc HTML from its input files.
val javadoc = tasks.register("javadoc", Javadoc::class) {
    // Self-explanatory, use these files to generate the Javadoc.
    source = android.sourceSets["main"].java.getSourceFiles()

    // We need to include the Android framework classes, otherwise the Javadoc
    // compiler won't be able to find them.
    classpath += project.files(android.bootClasspath)
}

// This takes the Javadoc files generated by `javadoc` and bundles them into
// a single .jar file.
val javadocJar = tasks.register("javadocJar", Jar::class) {
    // All of this should be self-explanatory from the previous tasks.
    dependsOn(javadoc)
    from(javadoc)
    archiveClassifier.set("javadoc")
}

afterEvaluate {
    publishing {
        publications {
            register("release", MavenPublication::class){
                // Applies the component for the release build variant.
                // NOTE : Delete this line code if you publish Native Java / Kotlin Library
                from(components["release"])

                // Include the -sources.jar and -javadoc.jar files that we defined
                // earlier.
                artifact(sourcesJar)
                artifact(javadocJar)
                groupId = "id.co.app"
                artifactId = "notification"
                version = "1.0.0"
//                artifact("$buildDir/outputs/aar/${project.name}-release.aar") // this is the solution I came up with
            }
        }
    }
}

apply{
    from("$rootDir/publish.gradle")
}